{"version":3,"sources":["HOCs/ErrorBoundary.tsx","containers/App/App.tsx","serviceWorker.js","index.tsx","components/UI/Loader/Loader.tsx","components/UI/Loader/Loader.module.css"],"names":["ErrorBoundary","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","react","message","children","React","Layout","lazy","__webpack_require__","e","then","bind","BurgerBuilder","Promise","all","App","react_default","a","createElement","Suspense","fallback","Loader","ErrorBoundary_ErrorBoundary","Component","Boolean","window","location","hostname","match","ReactDOM","render","containers_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Loader_module_css__WEBPACK_IMPORTED_MODULE_1__","_Loader_module_css__WEBPACK_IMPORTED_MODULE_1___default","className","styles","module","exports","load8"],"mappings":"+OAMqBA,cAOnB,SAAAA,EAAYC,GAAW,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACrBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,MAAO,MAJYR,6FAHgBQ,GACrC,MAAO,CAAEA,2DAWT,OACEC,EAAA,cAAAA,EAAA,cAAGN,KAAKI,MAAMC,MAAQL,KAAKI,MAAMC,MAAME,QAAUP,KAAKJ,MAAMY,iBAjBvBC,aCFrCC,EAASC,eAAK,kBAClBC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,YAEIC,EAAgBL,eAAK,kBACzBM,QAAAC,IAAA,CAAAN,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,YAmBaI,mLAdX,OACEC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,CAAgBC,SAAUJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,OACxBL,EAAAC,EAAAC,cAACZ,EAAD,KACEU,EAAAC,EAAAC,cAACI,EAAD,KACEN,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,CAAgBC,SAAUJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,OACxBL,EAAAC,EAAAC,cAACN,EAAD,iBAPIW,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAQd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAgB,SD2H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC,+CEnInB,IAAAC,EAAA/B,EAAA,GAAAgC,EAAAhC,EAAAiC,EAAAF,GAAAG,EAAAlC,EAAA,GAAAmC,EAAAnC,EAAAiC,EAAAC,GAKerB,IAFA,kBAAMmB,EAAAvB,EAAAC,cAAA,OAAK0B,UAAWC,IAAOxB,QAAvB,kCCFrByB,EAAAC,QAAA,CAAkB1B,OAAA,uBAAA2B,MAAA","file":"static/js/main.eafc6b65.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\nexport interface IErrorBoundaryState {\r\n  error: Error | null;\r\n}\r\n\r\nexport default class ErrorBoundary extends React.Component<\r\n  {},\r\n  IErrorBoundaryState\r\n> {\r\n  public static getDerivedStateFromError(error: Error) {\r\n    return { error };\r\n  }\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      error: null,\r\n    };\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <>{this.state.error ? this.state.error.message : this.props.children}</>\r\n    );\r\n  }\r\n}\r\n","import React, { Component, lazy } from 'react';\r\nimport Loader from '../../components/UI/Loader/Loader';\r\nimport ErrorBoundary from '../../HOCs/ErrorBoundary';\r\n\r\nconst Layout = lazy(() =>\r\n  import(/* webpackChunkName: \"Layout\" */ '../Layout/Layout'),\r\n);\r\nconst BurgerBuilder = lazy(() =>\r\n  import(/* webpackChunkName: \"BurgerBuilder\" */ '../BurgerBuilder/BurgerBuilder'),\r\n);\r\n\r\nclass App extends Component {\r\n  public render() {\r\n    return (\r\n      <React.Suspense fallback={<Loader />}>\r\n        <Layout>\r\n          <ErrorBoundary>\r\n            <React.Suspense fallback={<Loader />}>\r\n              <BurgerBuilder />\r\n            </React.Suspense>\r\n          </ErrorBoundary>\r\n        </Layout>\r\n      </React.Suspense>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render( <App />, document.getElementById( 'root' ) );\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport styles from './Loader.module.css';\r\n\r\nconst Loader = () => <div className={styles.Loader}>Loading...</div>;\r\n\r\nexport default Loader;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Loader_Loader__8lZyz\",\"load8\":\"Loader_load8__2GumZ\"};"],"sourceRoot":""}