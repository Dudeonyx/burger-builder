{"version":3,"sources":["components/UI/Loader/Loader.tsx","components/UI/Loader/index.ts","components/Retry/Retry.tsx","components/Retry/index.ts","components/UI/Loader/Loader.module.css","HOCs/ErrorBoundary.tsx","containers/App/App.tsx","serviceWorker.js","index.tsx"],"names":["Loader","react_default","a","createElement","className","styles","__webpack_require__","d","__webpack_exports__","UI_Loader_Loader","retryStyle","borderBottom","color","cursor","Retry","_ref","retryHandler","additionalInfo","mainMessage","additionalMessage","style","textAlign","textTransform","onClick","components_Retry_Retry","module","exports","load8","ErrorBoundary","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","retry","setState","error","state","react","message","children","React","Checkout","lazy","Promise","all","e","then","bind","Layout","BurgerBuilder","Orders","App","Suspense","fallback","ErrorBoundary_ErrorBoundary","Route","path","exact","component","Component","Boolean","window","location","hostname","match","app","BrowserRouter","containers_App_App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bffea163.chunk.js","sourcesContent":["import React from 'react';\r\nimport styles from './Loader.module.css';\r\n\r\nconst Loader = () => <div className={styles.Loader}>Loading...</div>;\r\n\r\nexport default Loader;\r\n","export { default } from './Loader';\r\nexport * from './Loader';\r\n","import React, { MouseEventHandler, ReactNode, SFC } from 'react';\r\n\r\nconst retryStyle = {\r\n  borderBottom: '1px solid lightblue',\r\n  color: 'lightblue',\r\n  cursor: 'pointer'\r\n};\r\n\r\nexport interface IRetryProps {\r\n  retryHandler: MouseEventHandler;\r\n  mainMessage?: ReactNode;\r\n  additionalMessage?: ReactNode;\r\n  additionalInfo?: ReactNode;\r\n}\r\n\r\nconst Retry: SFC<IRetryProps> = ({\r\n  retryHandler,\r\n  additionalInfo,\r\n  mainMessage,\r\n  additionalMessage\r\n}) => {\r\n  return (\r\n    <div style={{ textAlign: 'center' }}>\r\n      <h3 style={{ textAlign: 'center', textTransform: 'capitalize' }}>\r\n        {mainMessage ? mainMessage : `An Error Has Occured, Please `}\r\n        <span onClick={retryHandler} style={retryStyle}>\r\n          {'Retry'}\r\n        </span>\r\n        .<br />\r\n        {additionalMessage ? additionalMessage : null}\r\n      </h3>\r\n      {additionalInfo ? (\r\n        <div style={{ textAlign: 'center' }}>\r\n          <h4>Additional Error Info</h4>\r\n          <p>{additionalInfo}</p>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Retry;\r\n","export { default } from './Retry';\r\nexport * from './Retry';\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Loader_Loader__8lZyz\",\"load8\":\"Loader_load8__2GumZ\"};","import * as React from 'react';\r\nimport Retry from '../components/Retry';\r\n\r\nexport interface IErrorBoundaryState {\r\n  error: Error | null;\r\n}\r\n\r\nexport default class ErrorBoundary extends React.Component<\r\n  {},\r\n  IErrorBoundaryState\r\n> {\r\n  public static getDerivedStateFromError(error: Error) {\r\n    return { error };\r\n  }\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      error: null\r\n    };\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <>\r\n        {this.state.error ? (\r\n          <Retry\r\n            retryHandler={this.retry}\r\n            additionalInfo={this.state.error.message}\r\n          />\r\n        ) : (\r\n          this.props.children\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n\r\n  private retry = () => {\r\n    this.setState({ error: null });\r\n  };\r\n}\r\n","import React, { Component, lazy, Suspense } from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport Loader from '../../components/UI/Loader';\r\nimport ErrorBoundary from '../../HOCs/ErrorBoundary';\r\n// import Checkout from '../Checkout/Checkout';\r\n\r\nconst Checkout = lazy(() =>\r\n  import(/* webpackChunkName: \"Checkout\", webpackPrefetch: true */ '../Checkout')\r\n);\r\n\r\n// const SNCheckout = suspenseNode(Checkout, {});\r\n\r\nconst Layout = lazy(() =>\r\n  import(/* webpackChunkName: \"Layout\", webpackPreload: true */ '../Layout')\r\n);\r\nconst BurgerBuilder = lazy(() =>\r\n  import(/* webpackChunkName: \"BurgerBuilder\", webpackPrefetch: true */ '../BurgerBuilder')\r\n);\r\n\r\nconst Orders = lazy(() =>\r\n  import(/* webpackChunkName: \"Orders\", webpackPrefetch: true */ '../Orders')\r\n);\r\n\r\nclass App extends Component {\r\n  public render() {\r\n    return (\r\n      <React.Suspense fallback={<Loader />}>\r\n        <Layout>\r\n          <ErrorBoundary>\r\n            <React.Suspense fallback={<Loader />}>\r\n              <Route path=\"/\" exact={true} component={BurgerBuilder} />\r\n              <Route path=\"/checkout\" exact={false} component={Checkout} />\r\n              <Route path=\"/all-orders\" exact={true} component={Orders} />\r\n            </React.Suspense>\r\n            {/* {SNCheckout} */}\r\n          </ErrorBoundary>\r\n        </Layout>\r\n      </React.Suspense>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './containers/App';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst app = (\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>\r\n);\r\n\r\nReactDOM.render(app, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}