{"version":3,"sources":["components/Burger/BurgerIngredient/BurgerIngredient.module.css","components/Burger/BurgerDisplay/BurgerDisplay.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/Burger/BurgerIngredient/BurgerIngredient.tsx","components/Burger/BurgerDisplay/BurgerDisplay.tsx","components/Burger/BurgerDisplay/index.ts"],"names":["module","exports","BreadBottom","BreadTop","Seeds1","Seeds2","Meat","Cheese","Salad","Bacon","Burger","_toConsumableArray","arr","Array","isArray","i","arr2","length","_arrayWithoutHoles","iter","Symbol","iterator","Object","prototype","toString","call","from","_iterableToArray","TypeError","_nonIterableSpread","ingredient","bacon","react_default","a","createElement","className","styles","bread-bottom","bread-top","cheese","meat","salad","BurgerIngredient","_ref","type","jsxArrayFromObject","GivenComponent","inputObject","entries","map","_ref2","slicedToArray","igKey","igVal","_","assign","key","reduce","subArr","concat","React","memo","props","allIngredients","ingredients","BurgerIngredient_BurgerIngredient","__webpack_require__","d","__webpack_exports__","BurgerDisplay","BurgerDisplay_jsxArrayFromObject"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,YAAA,sCAAAC,SAAA,mCAAAC,OAAA,iCAAAC,OAAA,iCAAAC,KAAA,+BAAAC,OAAA,iCAAAC,MAAA,gCAAAC,MAAA,qDCAlBT,EAAAC,QAAA,CAAkBS,OAAA,gECEH,SAAAC,EAAAC,GACf,OCJe,SAAAA,GACf,GAAAC,MAAAC,QAAAF,GAAA,CACA,QAAAG,EAAA,EAAAC,EAAA,IAAAH,MAAAD,EAAAK,QAAiDF,EAAAH,EAAAK,OAAgBF,IACjEC,EAAAD,GAAAH,EAAAG,GAGA,OAAAC,GDFSE,CAAiBN,IEJX,SAAAO,GACf,GAAAC,OAAAC,YAAAC,OAAAH,IAAA,uBAAAG,OAAAC,UAAAC,SAAAC,KAAAN,GAAA,OAAAN,MAAAa,KAAAP,GFGmCQ,CAAef,IGJnC,WACf,UAAAgB,UAAA,mDHG2DC,uDICrDC,EAAa,CACjBC,MAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAO3B,QAC9B4B,eAAgBL,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOlC,cACvCoC,YACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOjC,UACrB6B,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOhC,SACvB4B,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAO/B,UAG3BkC,OAAQP,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAO7B,SAC/BiC,KAAMR,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAO9B,OAC7BmC,MAAOT,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAO5B,SAYjBkC,EAPgD,SAAAC,GAAY,IAAVC,EAAUD,EAAVC,KAE/D,OAAOd,EAAWc,IAAS,uBClBhBC,EACX,SAGAC,EACAC,GAaA,OAXiBzB,OAAO0B,QAAQD,GAC7BE,IAAI,SAAAN,GAAoB,IAAAO,EAAA5B,OAAA6B,EAAA,EAAA7B,CAAAqB,EAAA,GAAlBS,EAAkBF,EAAA,GAAXG,EAAWH,EAAA,GACvB,OAAOvC,EAAIE,MAAMwC,IAAQJ,IAAI,SAACK,EAAGvC,GAI/B,OAAOiB,EAAAC,EAAAC,cAACY,EAADxB,OAAAiC,OAAoB,CAAEX,KAAMQ,GAA5B,CAAqCI,IAAKJ,GAASrC,EAAI,UAGjE0C,OAAO,SAAC7C,EAAK8C,GAAN,OAAA/C,EAAqBC,GAArB+C,OAAAhD,EAA6B+C,KAAS,KAuBnCE,MAAMC,KAdoC,SAAAC,GACvD,IAAIC,EAAiBlB,EAAmBH,EAAkBoB,EAAME,aAIhE,OAH8B,IAA1BD,EAAe9C,SACjB8C,EAAiB/B,EAAAC,EAAAC,cAAA,6CAGjBF,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAO1B,QACrBsB,EAAAC,EAAAC,cAAC+B,EAAD,CAAkBrB,KAAK,cACtBmB,EACD/B,EAAAC,EAAAC,cAAC+B,EAAD,CAAkBrB,KAAK,oBCvC7BsB,EAAAC,EAAAC,EAAA,4BAAAC,IAAAH,EAAAC,EAAAC,EAAA,uCAAAE","file":"static/js/BurgerDisplay.f8bde9cd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"BreadBottom\":\"BurgerIngredient_BreadBottom__1JbJF\",\"BreadTop\":\"BurgerIngredient_BreadTop__3WGm9\",\"Seeds1\":\"BurgerIngredient_Seeds1__wbLMI\",\"Seeds2\":\"BurgerIngredient_Seeds2__3B0WI\",\"Meat\":\"BurgerIngredient_Meat__1g-1z\",\"Cheese\":\"BurgerIngredient_Cheese__1vrHG\",\"Salad\":\"BurgerIngredient_Salad__Xz0zn\",\"Bacon\":\"BurgerIngredient_Bacon__jKfEN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Burger\":\"BurgerDisplay_Burger__ARHN3\"};","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}","export default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}","export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}","import PropTypes from 'prop-types';\r\nimport React, { Component, FunctionComponent } from 'react';\r\nimport styles from './BurgerIngredient.module.css';\r\n\r\n\r\nconst ingredient = {\r\n  bacon: <div className={styles.Bacon} />,\r\n  'bread-bottom': <div className={styles.BreadBottom} />,\r\n  'bread-top': (\r\n    <div className={styles.BreadTop}>\r\n      <div className={styles.Seeds1} />\r\n      <div className={styles.Seeds2} />\r\n    </div>\r\n  ),\r\n  cheese: <div className={styles.Cheese} />,\r\n  meat: <div className={styles.Meat} />,\r\n  salad: <div className={styles.Salad} />,\r\n};\r\n  export interface IBurgerIngredient {\r\n    type: 'bacon' | 'bread-bottom' | 'bread-top' | 'cheese' | 'meat' | 'salad';\r\n  }\r\nconst BurgerIngredient: FunctionComponent<IBurgerIngredient> = ({type}) => {\r\n  \r\n  return ingredient[type] || null;\r\n  \r\n}\r\n\r\n\r\nexport default BurgerIngredient;\r\n","import React, { ComponentType, FunctionComponent, ReactElement } from 'react';\r\nimport { Iingredients } from '../../../containers/BurgerBuilder/';\r\nimport BurgerIngredient from '../BurgerIngredient/';\r\nimport styles from './BurgerDisplay.module.css';\r\n\r\nexport const jsxArrayFromObject = <\r\n  R extends string,\r\n  O extends { [x in R]?: number }\r\n>(\r\n  GivenComponent: ComponentType<{ type: R }>,\r\n  inputObject: O\r\n): Array<ReactElement<{ type: R }>> => {\r\n  const useable = (Object.entries(inputObject) as Array<[R, number]>)\r\n    .map(([igKey, igVal]) => {\r\n      return [...Array(igVal)].map((_, i) => {\r\n        // const myprops: P = {} as P;\r\n        //  myprops[propName] = igKey as unknown as P[keyof P];\r\n        // // };\r\n        return <GivenComponent {...{ type: igKey }} key={igKey + (i + 1)} />;\r\n      });\r\n    })\r\n    .reduce((arr, subArr) => [...arr, ...subArr], []);\r\n\r\n  return useable;\r\n};\r\nexport interface IburgerDisplay {\r\n  ingredients: Iingredients;\r\n  // ingredients: {Iingredients: any};\r\n  // ingredients: any;\r\n}\r\nconst burgerDisplay: FunctionComponent<IburgerDisplay> = props => {\r\n  let allIngredients = jsxArrayFromObject(BurgerIngredient, props.ingredients);\r\n  if (allIngredients.length === 0) {\r\n    allIngredients = <p>Please start adding ingredients</p> as any;\r\n  }\r\n  return (\r\n    <div className={styles.Burger}>\r\n      <BurgerIngredient type=\"bread-top\" />\r\n      {allIngredients}\r\n      <BurgerIngredient type=\"bread-bottom\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(burgerDisplay);\r\n","export { default } from './BurgerDisplay';\r\nexport * from './BurgerDisplay';\r\n"],"sourceRoot":""}