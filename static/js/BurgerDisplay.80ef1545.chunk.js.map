{"version":3,"sources":["components/Burger/BurgerIngredient/BurgerIngredient.module.css","components/Burger/BurgerDisplay/BurgerDisplay.module.css","components/Burger/BurgerIngredient/BurgerIngredient.tsx","components/Burger/BurgerDisplay/BurgerDisplay.tsx"],"names":["module","exports","BreadBottom","BreadTop","Seeds1","Seeds2","Meat","Cheese","Salad","Bacon","Burger","React","memo","_ref","type","react_default","a","createElement","className","styles","ingredient","jsxArrayFromObject","GivenComponent","inputObject","Object","entries","map","_ref2","slicedToArray","igKey","igVal","toConsumableArray","Array","_","i","assign","key","reduce","arr","subArr","concat","props","allIngredients","BurgerIngredient","ingredients","length","BurgerIngredient_BurgerIngredient"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,YAAA,sCAAAC,SAAA,mCAAAC,OAAA,iCAAAC,OAAA,iCAAAC,KAAA,+BAAAC,OAAA,iCAAAC,MAAA,gCAAAC,MAAA,sDCAlBT,EAAAC,QAAA,CAAkBS,OAAA,8HCgCHC,MAAMC,KAN+C,SAAAC,GAGlE,OA1BiB,SAACC,GAClB,OAAQA,GACN,IAAK,eACH,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOjB,cAChC,IAAK,YACH,OACEa,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOhB,UACrBY,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOf,SACvBW,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOd,UAG7B,IAAK,QACH,OAAOU,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOV,QAChC,IAAK,SACH,OAAOM,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOZ,SAChC,IAAK,OACH,OAAOQ,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOb,OAChC,IAAK,QACH,OAAOS,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOX,QAChC,QACE,OAAO,MAMJY,CADHP,EADJC,2ECvBK,IAAMO,EACX,SAGAC,EACAC,GAaA,OAXiBC,OAAOC,QAAQF,GAC7BG,IAAI,SAAAb,GAAqB,IAAAc,EAAAH,OAAAI,EAAA,EAAAJ,CAAAX,EAAA,GAAnBgB,EAAmBF,EAAA,GAAZG,EAAYH,EAAA,GACxB,OAAOH,OAAAO,EAAA,EAAAP,CAAIQ,MAAMF,IAASJ,IAAI,SAACO,EAAGC,GAIhC,OAAOnB,EAAAC,EAAAC,cAACK,EAADE,OAAAW,OAAoB,CAAErB,KAAMe,GAA5B,CAAqCO,IAAKP,GAASK,EAAI,UAGjEG,OAAO,SAACC,EAAKC,GAAN,SAAAC,OAAAhB,OAAAO,EAAA,EAAAP,CAAqBc,GAArBd,OAAAO,EAAA,EAAAP,CAA6Be,KAAU,KAuBpC5B,cAAMC,KAdoC,SAAA6B,GACvD,IAAIC,EAAiBrB,EAAmBsB,EAAkBF,EAAMG,aAIhE,OAH8B,IAA1BF,EAAeG,SACjBH,EAAiB3B,EAAAC,EAAAC,cAAA,6CAGjBF,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOT,QACrBK,EAAAC,EAAAC,cAAC6B,EAAD,CAAkBhC,KAAK,cACtB4B,EACD3B,EAAAC,EAAAC,cAAC6B,EAAD,CAAkBhC,KAAK","file":"static/js/BurgerDisplay.80ef1545.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"BreadBottom\":\"BurgerIngredient_BreadBottom__3fY1M\",\"BreadTop\":\"BurgerIngredient_BreadTop__Td0dG\",\"Seeds1\":\"BurgerIngredient_Seeds1__2l3Qa\",\"Seeds2\":\"BurgerIngredient_Seeds2__toSs5\",\"Meat\":\"BurgerIngredient_Meat__ddIbA\",\"Cheese\":\"BurgerIngredient_Cheese__1pJ19\",\"Salad\":\"BurgerIngredient_Salad__1t4Vd\",\"Bacon\":\"BurgerIngredient_Bacon__cAFFM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Burger\":\"BurgerDisplay_Burger__3yFAY\"};","import React, { FunctionComponent } from 'react';\r\nimport styles from './BurgerIngredient.module.css';\r\nimport { IBurgerIngredientProps } from './types';\r\n\r\nconst ingredient = (type: IBurgerIngredientProps['type']) => {\r\n  switch (type) {\r\n    case 'bread-bottom':\r\n      return <div className={styles.BreadBottom} />;\r\n    case 'bread-top':\r\n      return (\r\n        <div className={styles.BreadTop}>\r\n          <div className={styles.Seeds1} />\r\n          <div className={styles.Seeds2} />\r\n        </div>\r\n      );\r\n    case 'bacon':\r\n      return <div className={styles.Bacon} />;\r\n    case 'cheese':\r\n      return <div className={styles.Cheese} />;\r\n    case 'meat':\r\n      return <div className={styles.Meat} />;\r\n    case 'salad':\r\n      return <div className={styles.Salad} />;\r\n    default:\r\n      return null;\r\n  }\r\n};\r\nconst BurgerIngredient: FunctionComponent<IBurgerIngredientProps> = ({\r\n  type,\r\n}) => {\r\n  return ingredient(type);\r\n};\r\n\r\nexport default React.memo(BurgerIngredient);\r\n","import React, { ComponentType, FunctionComponent, ReactElement } from 'react';\r\nimport BurgerIngredient from '../BurgerIngredient/BurgerIngredient';\r\nimport styles from './BurgerDisplay.module.css';\r\nimport { Iingredients } from '../../../types/ingredients';\r\n\r\nexport const jsxArrayFromObject = <\r\n  R extends string,\r\n  O extends { [x in R]?: number }\r\n>(\r\n  GivenComponent: ComponentType<{ type: R }>,\r\n  inputObject: O,\r\n): Array<ReactElement<{ type: R }>> => {\r\n  const useable = (Object.entries(inputObject) as Array<[R, number]>)\r\n    .map(([igKey, igVal,]) => {\r\n      return [...Array(igVal),].map((_, i) => {\r\n        // const myprops: P = {} as P;\r\n        //  myprops[propName] = igKey as unknown as P[keyof P];\r\n        // // };\r\n        return <GivenComponent {...{ type: igKey }} key={igKey + (i + 1)} />;\r\n      });\r\n    })\r\n    .reduce((arr, subArr) => [...arr, ...subArr,], []);\r\n\r\n  return useable;\r\n};\r\nexport interface IburgerDisplay {\r\n  ingredients: Iingredients;\r\n  // ingredients: {Iingredients: any};\r\n  // ingredients: any;\r\n}\r\nconst burgerDisplay: FunctionComponent<IburgerDisplay> = props => {\r\n  let allIngredients = jsxArrayFromObject(BurgerIngredient, props.ingredients);\r\n  if (allIngredients.length === 0) {\r\n    allIngredients = <p>Please start adding ingredients</p> as any;\r\n  }\r\n  return (\r\n    <div className={styles.Burger}>\r\n      <BurgerIngredient type=\"bread-top\" />\r\n      {allIngredients}\r\n      <BurgerIngredient type=\"bread-bottom\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(burgerDisplay);\r\n"],"sourceRoot":""}