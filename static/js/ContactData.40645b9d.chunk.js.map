{"version":3,"sources":["containers/Checkout/ContactData/ContactData.styles.ts","containers/Checkout/ContactData/ContactData.tsx"],"names":["StyledContactData","Object","styled_base_browser_esm","target","name","styles","ContactData","state","customer","value","type","placeholder","id","label","dataSet","validation","required","valid","touched","minLength","phone","isNumeric","email","isEmail","street","city","country","deliveryMethod","options","checked","updateContactDataForm","e","updatedCustomer","updateFormImmutably","_this","setState","mapToInput","mapToInputs","cancel","preventDefault","currentTarget","form","reset","props","history","goBack","submitBurger","_callee","regenerator_default","a","wrap","_context","prev","next","reportValidity","ingredients","Error","submitBurgerOrder","totalPrice","token","userId","error","push","t0","console","stop","this","_this$state$customer","submitting","react_default","createElement","Loader","map","Button","children","onClick","btnType","Modal","show","hider","bgColor","minWidth","Component","mapContactDataStateToProps","selectBurgerOrderSubmitting","selectIngredients","getTotalPriceFromStore","selectAuthIdToken","selectBurgerOrderError","selectAuthUserId","mapContactDataDispatchToProps","connectContactData","connect","withErrorHandler","axios"],"mappings":"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","file":"static/js/ContactData.40645b9d.chunk.js","sourcesContent":["import styled from '@emotion/styled/macro';\r\nexport const StyledContactData = styled.div`\r\n  margin: 10px auto;\r\n  text-align: center;\r\n\r\n  form div {\r\n    margin: 4px 0;\r\n  }\r\n\r\n  form {\r\n    overflow: auto;\r\n    box-sizing: border-box;\r\n    border-radius: 10px;\r\n    background-color: rgba(255, 255, 255, 0.842);\r\n  }\r\n\r\n  @media (min-width: 550px) {\r\n    max-width: 540px;\r\n  }\r\n`;\r\n","// import styled from 'styled-components/macro';\r\nimport React, { MouseEvent, Component, ChangeEvent } from 'react';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport Loader from '../../../components/UI/Loader/Loader';\r\nimport Modal from '../../../components/UI/Modal/Modal';\r\nimport { IContactDataState } from './types';\r\nimport { submitBurgerOrder } from '../../../store/actions';\r\nimport { connect } from 'react-redux';\r\nimport { GetConnectProps } from '../../../store/';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport withErrorHandler from '../../../HOCs/withErrorHandler';\r\nimport axios from '../../../axios-orders';\r\nimport { StyledContactData } from './ContactData.styles';\r\nimport {\r\n  selectBurgerOrderSubmitting,\r\n  selectIngredients,\r\n  getTotalPriceFromStore,\r\n  selectAuthIdToken,\r\n  selectBurgerOrderError,\r\n  selectAuthUserId,\r\n} from '../../../store/selectors/';\r\nimport { mapToInputs } from '../../../components/UI/Input/';\r\nimport { updateFormImmutably } from '../../../components/UI/Input/InputUtilities';\r\nimport { IStore } from '../../../store/store';\r\nclass ContactData extends Component<IContactDataProps, IContactDataState> {\r\n  public state: IContactDataState = {\r\n    customer: {\r\n      name: {\r\n        value: '',\r\n        type: 'text',\r\n        placeholder: 'Your Name',\r\n        id: 'customer_name_id',\r\n        name: 'name',\r\n        label: 'Name:',\r\n        dataSet: 'basicInfo',\r\n        validation: {\r\n          required: true,\r\n          valid: false,\r\n          touched: false,\r\n          minLength: 5,\r\n        },\r\n      },\r\n      phone: {\r\n        value: '',\r\n        type: 'tel',\r\n        placeholder: 'Your Phone no.',\r\n        id: 'customer_phone_id',\r\n        name: 'phone',\r\n        label: 'Phone no.:',\r\n        dataSet: 'basicInfo',\r\n        validation: {\r\n          required: true,\r\n          valid: false,\r\n          touched: false,\r\n          minLength: 5,\r\n          isNumeric: true,\r\n        },\r\n      },\r\n      email: {\r\n        value: '',\r\n        type: 'email',\r\n        placeholder: 'Your Email',\r\n        id: 'customer_email_id',\r\n        name: 'email',\r\n        label: 'Email:',\r\n        dataSet: 'basicInfo',\r\n        validation: {\r\n          required: true,\r\n          valid: false,\r\n          touched: false,\r\n          minLength: 5,\r\n          isEmail: true,\r\n        },\r\n      },\r\n      street: {\r\n        value: '',\r\n        type: 'street-address',\r\n        placeholder: 'Your Street',\r\n        id: 'customer_street_id',\r\n        name: 'street',\r\n        label: 'Street:',\r\n        dataSet: 'address',\r\n        validation: {\r\n          required: true,\r\n          valid: false,\r\n          touched: false,\r\n          minLength: 3,\r\n        },\r\n      },\r\n      city: {\r\n        value: '',\r\n        type: 'text',\r\n        placeholder: 'Your City',\r\n        id: 'customer_city_id',\r\n        name: 'city',\r\n        label: 'City:',\r\n        dataSet: 'address',\r\n        validation: {\r\n          required: true,\r\n          valid: false,\r\n          touched: false,\r\n          minLength: 3,\r\n        },\r\n      },\r\n      state: {\r\n        value: '',\r\n        type: 'text',\r\n        placeholder: 'Your State/Province',\r\n        id: 'customer_state_id',\r\n        name: 'state',\r\n        label: 'State/\\nProvince:',\r\n        dataSet: 'address',\r\n        validation: {\r\n          required: true,\r\n          valid: false,\r\n          touched: false,\r\n          minLength: 3,\r\n        },\r\n      },\r\n      country: {\r\n        value: '',\r\n        type: 'country-name',\r\n        placeholder: 'Your Country',\r\n        id: 'customer_country_id',\r\n        name: 'country',\r\n        label: 'Country:',\r\n        dataSet: 'address',\r\n        validation: {\r\n          required: true,\r\n          valid: false,\r\n          touched: false,\r\n          minLength: 3,\r\n        },\r\n      },\r\n\r\n      deliveryMethod: {\r\n        id: 'customer_deliveryMethod_id',\r\n        label: '',\r\n        value: 'normal',\r\n        type: 'select',\r\n        name: 'deliveryMethod',\r\n        dataSet: 'deliveryMethod',\r\n        validation: {\r\n          required: true,\r\n          valid: true,\r\n          touched: true,\r\n        },\r\n        options: [\r\n          {\r\n            value: 'cheapest',\r\n            id: 'cheapest_id',\r\n            label: 'Cheapest',\r\n            checked: false,\r\n          },\r\n          {\r\n            value: 'cheap',\r\n            id: 'cheap_id',\r\n            label: 'Cheap',\r\n            checked: false,\r\n          },\r\n          {\r\n            value: 'normal',\r\n            id: 'normal_id',\r\n            label: 'Normal',\r\n            checked: true,\r\n          },\r\n          {\r\n            value: 'expensive',\r\n            id: 'expensive_id',\r\n            label: 'Expensive',\r\n            checked: false,\r\n          },\r\n          {\r\n            value: 'very_expensive',\r\n            id: 'very_expensive_id',\r\n            label: 'Very Expensive',\r\n            checked: false,\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  };\r\n  public render() {\r\n    const {\r\n      name,\r\n      city,\r\n      country,\r\n      deliveryMethod,\r\n      email,\r\n      phone,\r\n      state,\r\n      street,\r\n    } = this.state.customer;\r\n\r\n    const form = this.props.submitting ? (\r\n      <Loader />\r\n    ) : (\r\n      <form id=\"order_form\">\r\n        <h3>Enter Your Contact Details to Complete Your Order.</h3>\r\n        {[name, email, phone,].map(this.mapToInput)}\r\n        <fieldset>\r\n          <legend>Address</legend>\r\n          {[street, city, state, country,].map(this.mapToInput)}\r\n        </fieldset>\r\n        <fieldset>\r\n          <legend>Delivery Method</legend>\r\n          {[deliveryMethod,].map(this.mapToInput)}\r\n        </fieldset>\r\n\r\n        <div>\r\n          <Button\r\n            type=\"reset\"\r\n            children=\"CANCEL\"\r\n            onClick={this.cancel}\r\n            btnType=\"Danger\"\r\n          />\r\n          <Button\r\n            type=\"submit\"\r\n            children=\"ORDER\"\r\n            onClick={this.submitBurger}\r\n            btnType=\"Success\"\r\n          />\r\n        </div>\r\n      </form>\r\n    );\r\n    return (\r\n      <StyledContactData>\r\n        <Modal show={true} hider={this.cancel} bgColor=\"white\" minWidth={650}>\r\n          {form}\r\n        </Modal>\r\n      </StyledContactData>\r\n    );\r\n  }\r\n\r\n  private updateContactDataForm = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const updatedCustomer = updateFormImmutably(this.state.customer, e);\r\n    this.setState({ customer: updatedCustomer });\r\n  };\r\n\r\n  private mapToInput = mapToInputs(this.updateContactDataForm);\r\n\r\n  private cancel = (e: MouseEvent<HTMLButtonElement>) => {\r\n    e.preventDefault();\r\n    // tslint:disable-next-line: no-unused-expression\r\n    e.currentTarget.form && e.currentTarget.form.reset();\r\n    this.props.history.goBack();\r\n  };\r\n\r\n  private submitBurger = async (e: MouseEvent<HTMLButtonElement>) => {\r\n    if (e.currentTarget.form && e.currentTarget.form.reportValidity()) {\r\n      try {\r\n        e.preventDefault();\r\n        if (!this.props.ingredients) {\r\n          throw new Error('Empty Ingredients object!!!');\r\n        }\r\n        await this.props.submitBurgerOrder(\r\n          this.state.customer,\r\n          this.props.ingredients,\r\n          this.props.totalPrice,\r\n          this.props.token,\r\n          this.props.userId,\r\n        );\r\n        if (this.props.error) {\r\n          throw this.props.error;\r\n        }\r\n        this.props.history.push('/all-orders');\r\n      } catch (error) {\r\n        // tslint:disable-next-line:no-console\r\n        console.error('[submitBurger (ContactData)]', error);\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport const mapContactDataStateToProps = (state: IStore) => {\r\n  return {\r\n    submitting: selectBurgerOrderSubmitting(state),\r\n    ingredients: selectIngredients(state),\r\n    totalPrice: getTotalPriceFromStore(state),\r\n    token: selectAuthIdToken(state),\r\n    error: selectBurgerOrderError(state),\r\n    userId: selectAuthUserId(state),\r\n  };\r\n};\r\n\r\nconst mapContactDataDispatchToProps = {\r\n  submitBurgerOrder,\r\n};\r\n\r\nconst connectContactData = connect(\r\n  mapContactDataStateToProps,\r\n  mapContactDataDispatchToProps,\r\n);\r\nexport type IContactDataProps = RouteComponentProps &\r\n  GetConnectProps<typeof connectContactData>;\r\n\r\nexport default connectContactData(withErrorHandler(ContactData, axios));\r\n"],"sourceRoot":""}