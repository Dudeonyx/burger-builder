import { DeliveryMethods } from './CustomHooks';
import { InputTextConfig, InputSelectConfig } from '../components/UI/Input/types';
export type DeepPartial<T> = {[P in keyof T]?: DeepPartial<T[P]> }
export const makeForm = {
  name: (initialValue: string | Partial<InputTextConfig> = '', ): InputTextConfig => {
      if (typeof initialValue === 'string') return ({
    value: initialValue,
    type: 'text',
    placeholder: 'Your Name',
    id: 'Auth_name_id',
    name: 'name',
    label: 'Name:',
    validation: {
      required: true,
      valid: false,
      touched: false,
      minLength: 5,
    },
  })
  return {...{
    value: '',
    type: 'text',
    placeholder: 'Your Name',
    id: 'Auth_name_id',
    name: 'name',
    label: 'Name:',
    validation: {
      required: true,
      valid: false,
      touched: false,
      minLength: 5,
    },
  }, ...initialValue}
},
  phone: (initialValue: string | Partial<InputTextConfig> = ''): InputTextConfig => typeof initialValue === 'string' ? ({
    value: initialValue,
    type: 'tel',
    placeholder: 'Your Phone no.',
    id: 'customer_phone_id',
    name: 'phone',
    label: 'Phone no.:',
    dataSet: 'basicInfo',
    validation: {
      required: true,
      valid: false,
      touched: false,
      minLength: 5,
      isNumeric: true ,
    },
  }): {...{
    value: '',
    type: 'tel',
    placeholder: 'Your Phone no.',
    id: 'customer_phone_id',
    name: 'phone',
    label: 'Phone no.:',
    dataSet: 'basicInfo',
    validation: {
      required: true,
      valid: false,
      touched: false,
      minLength: 5,
      isNumeric: true ,
    },
  },...initialValue},
  password: (initialValue: string | Partial<InputTextConfig> = ''): InputTextConfig => typeof initialValue === 'string' ? ({
    value: initialValue,
    type: 'password',
    placeholder: 'Password',
    id: 'Auth_word_id',
    name: 'password',
    label: 'Password:',
    validation: {
      required: true,
      valid: false,
      touched: false,
      minLength: 6,
    },
  }) : {...{
    value: '',
    type: 'password',
    placeholder: 'Password',
    id: 'Auth_word_id',
    name: 'password',
    label: 'Password:',
    validation: {
      required: true,
      valid: false,
      touched: false,
      minLength: 6,
    },
  },...initialValue},
  email: (initialValue: string | Partial<InputTextConfig> = ''): InputTextConfig => typeof initialValue === 'string' ? ({
    value: initialValue,
    type: 'email',
    placeholder: 'Your Email',
    id: 'Auth_email_id',
    name: 'email',
    label: 'Email:',
    validation: {
      required: true,
      valid: false,
      touched: false,
      minLength: 5,
      isEmail: true,
    },
  }) : {...{
    value: '',
    type: 'email',
    placeholder: 'Your Email',
    id: 'Auth_email_id',
    name: 'email',
    label: 'Email:',
    validation: {
      required: true,
      valid: false,
      touched: false,
      minLength: 5,
      isEmail: true,
    },
  },...initialValue},
  street: (initialValue: string | Partial<InputTextConfig> = ''): InputTextConfig => typeof initialValue === 'string' ? ({
    value: initialValue,
    type: 'street-address',
    placeholder: 'Your Street',
    id: 'customer_street_id',
    name: 'street',
    label: 'Street:',
    dataSet: 'address',
    validation: {
      required: true,
      valid: false,
      touched: false,
      minLength: 3,
    },
  }) : {...{
    value: '',
    type: 'street-address',
    placeholder: 'Your Street',
    id: 'customer_street_id',
    name: 'street',
    label: 'Street:',
    dataSet: 'address',
    validation: {
      required: true,
      valid: false,
      touched: false,
      minLength: 3,
    },
  },...initialValue},
  city: (initialValue: string | Partial<InputTextConfig> = ''): InputTextConfig => typeof initialValue === 'string' ? ({
    value: initialValue,
    type: 'text',
    placeholder: 'Your City',
    id: 'customer_city_id',
    name: 'city',
    label: 'City:',
    dataSet: 'address',
    validation: {
      required: true,
      valid: false,
      touched: false,
      minLength: 3,
    },
  }) : {...{
    value: '',
    type: 'text',
    placeholder: 'Your City',
    id: 'customer_city_id',
    name: 'city',
    label: 'City:',
    dataSet: 'address',
    validation: {
      required: true,
      valid: false,
      touched: false,
      minLength: 3,
    },
  },...initialValue},
  state: (initialValue: string | Partial<InputTextConfig> = ''): InputTextConfig => typeof initialValue === 'string' ? ({
    value: initialValue,
    type: 'text',
    placeholder: 'Your State/Province',
    id: 'customer_state_id',
    name: 'state',
    label: 'State/\nProvince:',
    dataSet: 'address',
    validation: {
      required: true,
      valid: false,
      touched: false,
      minLength: 3,
    },
  }) : {...{
    value: '',
    type: 'text',
    placeholder: 'Your State/Province',
    id: 'customer_state_id',
    name: 'state',
    label: 'State/\nProvince:',
    dataSet: 'address',
    validation: {
      required: true,
      valid: false,
      touched: false,
      minLength: 3,
    },
  },...initialValue},
  country: (initialValue: string | Partial<InputTextConfig> = ''): InputTextConfig => typeof initialValue === 'string' ? ({
    value: initialValue,
    type: 'country-name',
    placeholder: 'Your Country',
    id: 'customer_country_id',
    name: 'country',
    label: 'Country:',
    dataSet: 'address',
    validation: {
      required: true,
      valid: false,
      touched: false,
      minLength: 3,
    },
  }) : {...{
    value: '',
    type: 'country-name',
    placeholder: 'Your Country',
    id: 'customer_country_id',
    name: 'country',
    label: 'Country:',
    dataSet: 'address',
    validation: {
      required: true,
      valid: false,
      touched: false,
      minLength: 3,
    },
  },...initialValue},
  select: (initialValue: string | Partial<InputSelectConfig> = ''): InputSelectConfig => typeof initialValue ===  'string' ? ({
    id: 'customer_select_id',
    label: '',
    value: initialValue,
    type: 'select',
    name: 'select',
    dataSet: '',
    validation: {
      required: true,
      valid: true,
      touched: true,
    },
    options: [],
  }): {...{
    id: 'customer_select_id',
    label: '',
    value: '',
    type: 'select',
    name: 'select',
    dataSet: 'select',
    validation: {
      required: true,
      valid: true,
      touched: true,
    },
    options: [],
  },...initialValue},
  deliveryMethod: (initialValue: DeliveryMethods | Partial<InputSelectConfig> = 'normal'): InputSelectConfig => typeof initialValue ===  'string' ? ({
    id: 'customer_deliveryMethod_id',
    label: '',
    value: initialValue,
    type: 'select',
    name: 'deliveryMethod',
    dataSet: '',
    validation: {
      required: true,
      valid: true,
      touched: true,
    },
    options: [
      {
        value: 'cheapest',
        id: 'cheapest_id',
        label: 'Cheapest',
      },
      {
        value: 'cheap',
        id: 'cheap_id',
        label: 'Cheap',
      },
      {
        value: 'normal',
        id: 'normal_id',
        label: 'Normal',
      },
      {
        value: 'expensive',
        id: 'expensive_id',
        label: 'Expensive',
      },
      {
        value: 'very_expensive',
        id: 'very_expensive_id',
        label: 'Very Expensive',
      },
    ],
  }): {...{
    id: 'customer_deliveryMethod_id',
    label: '',
    value: initialValue as string,
    type: 'select',
    name: 'select',
    dataSet: 'deliveryMethod',
    validation: {
      required: true,
      valid: true,
      touched: true,
    },
    options: [{
        value: 'cheapest',
        id: 'cheapest_id',
        label: 'Cheapest',
      },
      {
        value: 'cheap',
        id: 'cheap_id',
        label: 'Cheap',
      },
      {
        value: 'normal',
        id: 'normal_id',
        label: 'Normal',
      },
      {
        value: 'expensive',
        id: 'expensive_id',
        label: 'Expensive',
      },
      {
        value: 'very_expensive',
        id: 'very_expensive_id',
        label: 'Very Expensive',
      },],
  },...initialValue},
};
